#!/bin/bash

# ==============================================================================
# Module : enumeration.sh
# Description : SECURITY - Pentest (phase 2/4) enumeration on a network target
# Author      : netopsys (https://github.com/netopsys)
# License     : GPL-3.0  
# ==============================================================================

#DEBUG=1
set -euo pipefail 
[ -n "${DEBUG:-}" ] && set -x 

# ------------------------------------------------------------------------------
# Banner
# ------------------------------------------------------------------------------
print_banner() { 
  echo "==========================================================="
  echo -e "🛡️  ${CYAN}NETOPSYS${RESET} - SECURITY - Pentest (phase 2/4) enumeration on a network target"
  echo "===========================================================" 
}

# ------------------------------------------------------------------------------
# Logging Helpers
# ------------------------------------------------------------------------------
readonly RED="\033[0;31m"
readonly GREEN="\033[0;32m"
readonly YELLOW="\033[0;33m"
readonly CYAN="\033[0;36m"
readonly RESET="\033[0m"
 
log_info()  { echo -e "$(date +'%Y-%m-%d %H:%M:%S') ${CYAN}[INFO]${RESET} $*"; }
log_ok()    { echo -e "$(date +'%Y-%m-%d %H:%M:%S') ${GREEN}✔${RESET} $*"; }
log_warn()  { echo -e "$(date +'%Y-%m-%d %H:%M:%S') ${YELLOW}[WARN]${RESET} $*"; }
log_error() { echo -e "$(date +'%Y-%m-%d %H:%M:%S') ${RED}[ERROR]${RESET} $*"; }
section()   { echo -e "$(date +'%Y-%m-%d %H:%M:%S') ${CYAN}$*${RESET}"; }

# ------------------------------------------------------------------------------
# Constantes & Variables
# ------------------------------------------------------------------------------
target=""
log_enabled=false
output_dir="" 

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

warning_script() {
  log_warn "${YELLOW}RESPONSABILITY${RESET}"
  echo -e "--------------------------"
  echo -e "This script is provided for educational purposes and testing on systems you own or for which you have explicit authorization."
  echo -e "Any unauthorized use may be illegal and lead to prosecution."
  echo -e "You are solely responsible for the use of this tool."
  echo -e " "
  read -rp "➤ Confirm you want to continue? [Y/n] : " CHOICE
  CHOICE="${CHOICE:-y}"

  if [[ "$CHOICE" != "y" ]]; then
    log_warn "Operation aborted by user."
    exit 0
  fi
}

check_root() {
  if [[ "$EUID" -ne 0 ]]; then
    log_error "Please run this script as root."
    exit 1
  fi
}

check_dependencies() {
  local dependencies=(nmap)
  local missing=() 

  for cmd in "${dependencies[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
      missing+=("$cmd")
    fi
  done

  if (( ${#missing[@]} > 0 )); then
    log_error "Missing packages: ${missing[*]}"
    echo -e "\nTo install them:\n  sudo apt install ${missing[*]}"
    exit 1 
  fi
}

start_script() {
  if [[ "$log_enabled" == true ]]; then
    output_dir="/var/log/pentest/$(date +'%Y%m%d-%H%M%S')/enumeration"
    mkdir -p "$output_dir"
    log_info "Logging enabled: $output_dir"
  fi
  log_info "Target: $target"
}

resume_script() {
  log_info "Pentest enumeration phase completed."
  [[ "$log_enabled" == true ]] && log_info "Results available in: $output_dir"
}

nmap_scan_ports() {
  log_info "Scanning host: $target"
  read -rp "➤ Scan ports on discovered hosts? [Y/n] : " CHOICE
  CHOICE="${CHOICE:-y}"
  if [[ "$CHOICE" == "y" ]]; then
    local mac_info
    local open_ports
    local open_ports_transfert_data_tcp
    local open_ports_transfert_data_udp

    mac_info=$(nmap -sn "$target" | grep "MAC Address:" || echo "MAC: Unknown")
    open_ports=$(nmap -Pn -T4 --open "$target" | grep -E "^[0-9]+/tcp\s+open")
    echo "$mac_info"
    echo "$open_ports"

    log_info "Ports TCP data transfert:"
    PORTS="21,22,80,443,445,990,2049,3306,5432"
    open_ports_transfert_data_tcp=$(nmap -p $PORTS -sS -T4 -Pn --open "$target")
    echo "$open_ports_transfert_data_tcp"
    
    log_info "Ports UDP data transfert:"
    open_ports_transfert_data_udp=$(nmap -p $PORTS -sU -T4 -Pn --open "$target")
    echo "$open_ports_transfert_data_udp"
  else
    log_warn "Port scan skipped."
  fi
}

# ------------------------------------------------------------------------------
# Usage
# ------------------------------------------------------------------------------
print_usage() {
  cat << EOF
Usage:
  $(basename "$0") -t <target> [--log]
  $(basename "$0") -h | --help

Options:
  -t, --target <target>  Target.
  --log                  Enables result logging into /var/log/pentest/<date>/enumeration
  -h, --help             Show this help message.

Examples:
  $(basename "$0") -t example.com
  $(basename "$0") -t 192.168.0.15
  $(basename "$0") --target example.com --log
EOF
  exit 0
}
# ------------------------------------------------------------------------------
# Main prog
# ------------------------------------------------------------------------------
main() {
  print_banner

  if [[ $# -eq 0 ]]; then
    log_error "Missing Options"
    print_usage
  fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --log)
        log_enabled=true
        shift
        ;;
      -t|--target)
        if [[ -n "$2" ]]; then
          target="$2"
          shift 2
        else
          log_error "Option $1 requires an argument."
          print_usage
        fi
        ;;
      -h|--help)
        print_usage
        ;;
      *)
        log_error "Unknown option: $1"
        print_usage
        ;;
    esac
  done

  if [[ -z "$target" ]]; then
    log_error "Missing target."
    print_usage
  fi

  check_root
  check_dependencies  
  warning_script
  start_script
  nmap_scan_ports "$target"
  resume_script 
}

# ------------------------------------------------------------------------------
# Execute prog
# ------------------------------------------------------------------------------
# Run only if executed directly
[[ "${BASH_SOURCE[0]}" == "$0" ]] && main "$@"
